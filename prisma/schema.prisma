// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  username          String           @unique
  name              String?
  password          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  posts             Post[]
  comments          Comment[]
  postReactions     PostReaction[]
  commentReactions  CommentReaction[]
  sentMessages      Message[]        @relation("SentMessages")
  receivedMessages  Message[]        @relation("ReceivedMessages")
  followers         Follow[]         @relation("Followers")
  following         Follow[]         @relation("Following")
  notifications     Notification[]
}

model Post {
  id             String          @id @default(cuid())
  title          String
  content        String
  published      Boolean         @default(false)
  visibility     Visibility      @default(PUBLIC)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  author         User            @relation(fields: [authorId], references: [id])
  authorId       String
  comments       Comment[]
  postReactions  PostReaction[]
  media          Media[]
  @@index([createdAt])
}

model Comment {
  id                String            @id @default(cuid())
  content           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  post              Post              @relation(fields: [postId], references: [id])
  postId            String
  author            User              @relation(fields: [authorId], references: [id])
  authorId          String
  commentReactions  CommentReaction[]
  media             Media[]
}

model PostReaction {
  id        String        @id @default(cuid())
  type      ReactionType
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String

  @@index([postId])
}

model CommentReaction {
  id        String        @id @default(cuid())
  type      ReactionType
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment       @relation(fields: [commentId], references: [id])
  commentId String

  @@index([commentId])
}

model Media {
  id        String      @id @default(cuid())
  url       String
  type      MediaType
  post      Post?       @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment?    @relation(fields: [commentId], references: [id])
  commentId String?

  @@index([postId])
  @@index([commentId])
}

model Follow {
  id          String    @id @default(cuid())
  follower    User      @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User      @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime  @default(now())

  @@unique([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  content   String
  read      Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())
}

model Message {
  id          String    @id @default(cuid())
  content     String
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String
  createdAt   DateTime  @default(now())
}
